MHratio <- loglik(t, x, v[i,], mu[i,], theta[i,], mu1[i,], mu2_prop, alpha[i-1,], beta[i-1]) -
loglik(t, x, v[i,], mu[i,], theta[i,], mu[i,], mu2[i-1,], alpha[i-1,], beta[i-1]) +
logPriorMu(mu2_prop) - logPriorMu(mu2[i-1,])
if(runif(1) < exp(MHratio)) {
mu2[i,] <- mu2_prop
acc$mu2 <- acc$mu2 + rep(1, K)
} else {
mu2[i,] <- mu2[i -1,]
}
### Update alpha ###
alpha_prop <- alpha[i-1, ] + step * gradient_alpha(alpha[i-1,]) + sqrt(2*step) * rmvnorm(1, sigma = diag(K))
MHratio <- loglik(t, x, v[i,], mu[i,], theta[i,], mu1[i,], mu2[i,], alpha_prop, beta[i-1]) -
loglik(t, x, v[i,], mu[i,], theta[i,], mu1[i,], mu2[i,], alpha[i-1,], beta[i-1]) +
logPriorSigma2(exp(alpha_prop)) - logPriorSigma2(exp(alpha[i-1,])) +
sum(alpha_prop) - sum(alpha[i-1,]) # Log of Jacobian cancels out
if(runif(1) < exp(MHratio)) {
alpha[i,] <- alpha_prop
acc$alpha <- acc$alpha + rep(1, K)
} else {
alpha[i,] <- alpha[i -1,]
}
### Update beta ###
beta_prop <- beta[i-1, ] + step * gradient_beta(beta[i-1,]) + sqrt(2*step) * rmvnorm(1, sigma = diag(K))
MHratio <- loglik(t, x, v[i,], mu[i,], theta[i,], mu1[i,], mu2[i,], alpha[i,], beta_prop) -
loglik(t, x, v[i,], mu[i,], theta[i,], mu1[i,], mu2[i,], alpha[i,], beta[i-1]) +
logPriorSigma2(exp(beta_prop)) - logPriorSigma2(exp(beta[i-1,])) +
sum(beta_prop) - sum(beta[i-1,]) # Log of Jacobian cancels out
if(runif(1) < exp(MHratio)) {
beta[i,] <- beta_prop
acc$beta <- acc$beta + rep(1, K)
} else {
beta[i,] <- beta[i -1,]
}
}
step=0.5
# Initialize parameter vectors and starting values
v <- mu <- theta <- mu1 <- mu2 <- alpha <- beta <- matrix(0, nrow = nIter, ncol = K)
v[1,] <- starting[[1]]
mu[1,] <- starting[[2]]
theta[1,] <- starting[[3]]
mu1[1,] <- starting[[4]]
mu2[1,] <- starting[[5]]
alpha[1,] <- starting[[6]]
beta[1,] <- starting[[7]]
# Track acceptance rates
acc <- rep(list(rep(0, K)), 7)
names(acc) <- c("v", "mu", "theta", "mu1", "mu2", "alpha", "beta")
# Run Langevin for one chain
for (i in 2:nIter) {
cat(paste0("Beginning iteration ", i, ".\n"))
### Update v ###
v_prop <- v[i-1, ] + step * gradient_v(v[i-1,]) + sqrt(2*step) * rmvnorm(1, sigma = diag(K))
MHratio <- loglik(t, x, v_prop, mu[i-1,], theta[i-1,], mu1[i-1,], mu2[i-1,], alpha[i-1,], beta[i-1]) -
loglik(t, x, v[i-1,], mu[i-1,], theta[i-1,], mu1[i-1,], mu2[i-1,], alpha[i-1,], beta[i-1]) +
logPriorPi(invLogit(v_prop)) - logPriorPi(invLogit(v[i-1,])) +
sum(log(invLogit(v_prop))) - sum(log(invLogit(v_prop))) # Jacobians
if(runif(1) < exp(MHratio)) {
v[i,] <- v_prop
acc$v <- acc$v + rep(1, K)
} else {
v[i,] <- v[i -1,]
}
### Update mu ###
mu_prop <- mu[i-1, ] + step * gradient_mu(mu[i-1,]) + sqrt(2*step) * rmvnorm(1, sigma = diag(K))
MHratio <- loglik(t, x, v[i,], mu_prop, theta[i-1,], mu1[i-1,], mu2[i-1,], alpha[i-1,], beta[i-1]) -
loglik(t, x, v[i,], mu[i-1,], theta[i-1,], mu1[i-1,], mu2[i-1,], alpha[i-1,], beta[i-1]) +
logPriorMu(mu_prop) - logPriorMu(mu[i-1,])
if(runif(1) < exp(MHratio)) {
mu[i,] <- mu_prop
acc$mu <- acc$mu + rep(1, K)
} else {
mu[i,] <- mu[i -1,]
}
### Update theta ###
theta_prop <- theta[i-1, ] + step * gradient_theta(theta[i-1,]) + sqrt(2*step) * rmvnorm(1, sigma = diag(K))
MHratio <- loglik(t, x, v[i,], mu[i,], theta_prop, mu1[i-1,], mu2[i-1,], alpha[i-1,], beta[i-1]) -
loglik(t, x, v[i,], mu[i,], theta[i-1,], mu1[i-1,], mu2[i-1,], alpha[i-1,], beta[i-1]) +
logPriorSigma2(exp(theta_prop)) - logPriorSigma2(exp(theta[i-1,])) +
sum(theta_prop) - sum(theta[i-1,]) # Log of Jacobian cancels out
if(runif(1) < exp(MHratio)) {
theta[i,] <- theta_prop
acc$theta <- acc$theta + rep(1, K)
} else {
theta[i,] <- theta[i -1,]
}
### Update mu1 ###
mu1_prop <- mu1[i-1, ] + step * gradient_mu1(mu1[i-1,]) + sqrt(2*step) * rmvnorm(1, sigma = diag(K))
MHratio <- loglik(t, x, v[i,], mu[i,], theta[i,], mu1_prop, mu2[i-1,], alpha[i-1,], beta[i-1]) -
loglik(t, x, v[i,], mu[i,], theta[i,], mu1[i-1,], mu2[i-1,], alpha[i-1,], beta[i-1]) +
logPriorMu(mu1_prop) - logPriorMu(mu1[i-1,])
if(runif(1) < exp(MHratio)) {
mu1[i,] <- mu1_prop
acc$mu1 <- acc$mu1 + rep(1, K)
} else {
mu1[i,] <- mu1[i -1,]
}
### Update mu2 ###
mu2_prop <- mu2[i-1, ] + step * gradient_mu2(mu2[i-1,]) + sqrt(2*step) * rmvnorm(1, sigma = diag(K))
MHratio <- loglik(t, x, v[i,], mu[i,], theta[i,], mu1[i,], mu2_prop, alpha[i-1,], beta[i-1]) -
loglik(t, x, v[i,], mu[i,], theta[i,], mu[i,], mu2[i-1,], alpha[i-1,], beta[i-1]) +
logPriorMu(mu2_prop) - logPriorMu(mu2[i-1,])
if(runif(1) < exp(MHratio)) {
mu2[i,] <- mu2_prop
acc$mu2 <- acc$mu2 + rep(1, K)
} else {
mu2[i,] <- mu2[i -1,]
}
### Update alpha ###
alpha_prop <- alpha[i-1, ] + step * gradient_alpha(alpha[i-1,]) + sqrt(2*step) * rmvnorm(1, sigma = diag(K))
MHratio <- loglik(t, x, v[i,], mu[i,], theta[i,], mu1[i,], mu2[i,], alpha_prop, beta[i-1]) -
loglik(t, x, v[i,], mu[i,], theta[i,], mu1[i,], mu2[i,], alpha[i-1,], beta[i-1]) +
logPriorSigma2(exp(alpha_prop)) - logPriorSigma2(exp(alpha[i-1,])) +
sum(alpha_prop) - sum(alpha[i-1,]) # Log of Jacobian cancels out
if(runif(1) < exp(MHratio)) {
alpha[i,] <- alpha_prop
acc$alpha <- acc$alpha + rep(1, K)
} else {
alpha[i,] <- alpha[i -1,]
}
### Update beta ###
beta_prop <- beta[i-1, ] + step * gradient_beta(beta[i-1,]) + sqrt(2*step) * rmvnorm(1, sigma = diag(K))
MHratio <- loglik(t, x, v[i,], mu[i,], theta[i,], mu1[i,], mu2[i,], alpha[i,], beta_prop) -
loglik(t, x, v[i,], mu[i,], theta[i,], mu1[i,], mu2[i,], alpha[i,], beta[i-1]) +
logPriorSigma2(exp(beta_prop)) - logPriorSigma2(exp(beta[i-1,])) +
sum(beta_prop) - sum(beta[i-1,]) # Log of Jacobian cancels out
if(runif(1) < exp(MHratio)) {
beta[i,] <- beta_prop
acc$beta <- acc$beta + rep(1, K)
} else {
beta[i,] <- beta[i -1,]
}
}
source("kernels.R")
source("gradients.R")
source("priors.R")
source("likelihood.R")
source("langevin.R")
library(mvtnorm)
# Dimensions
N <- 100
n <- 10
# Number of basis functions
K <- 5
# Times
t <- seq(0, 1, length = (n+2))[-c(1, n+2)]
# Spatial locations
x1 <- runif(n)
x2 <- runif(n)
x <- matrix(c(x1, x2), ncol = 2)
# Temporal parameters
mu <- rnorm(K)
sig.sq <- rgamma(K, 1, 2)
theta <- log(sig.sq)
# Spatial parameters
mu1 <- rnorm(K)
mu2 <- rnorm(K)
tau.sq1 <- rgamma(K, 1, 2)
tau.sq2 <- rgamma(K, 1, 2)
alpha <- log(tau.sq1)
beta <- log(tau.sq2)
# Weights and transformed weights
p <- c(0.1, 0.2, 0.25, 0.15, 0.3)
v <- log(p / (1 - p))
# Test out likelihood functions
log(lik(t, x, v, mu, theta, mu1, mu2, alpha, beta))
loglik(t, x, v, mu, theta, mu1, mu2, alpha, beta)
# Test out gradient functions
gradient_v(v)
gradient_mu(mu)
gradient_theta(theta)
gradient_mu1(mu1)
gradient_mu2(mu2)
gradient_alpha(alpha)
gradient_beta(beta)
p
mu
sig.sq
starting <- list(v = v, mu = mu, theta = theta, mu1 = mu1, mu2 = mu2, alpha = alpha, beta = beta)
langevin_pp(x, t, N, K, starting, step = 0.5, nIter = 100, nBurn = 100, nThin = 2)
step=0.5
nIter=100
nBurn-100
nBurn=100
nThin=2
# Dimensions
n <- nrow(x)
p <- ncol(x)
# MCMC chain properties
nIter <- nBurn + nIter
# Initialize parameter vectors and starting values
v <- mu <- theta <- mu1 <- mu2 <- alpha <- beta <- matrix(0, nrow = nIter, ncol = K)
v[1,] <- starting[[1]]
mu[1,] <- starting[[2]]
theta[1,] <- starting[[3]]
mu1[1,] <- starting[[4]]
mu2[1,] <- starting[[5]]
alpha[1,] <- starting[[6]]
beta[1,] <- starting[[7]]
# Track acceptance rates
acc <- rep(list(rep(0, K)), 7)
names(acc) <- c("v", "mu", "theta", "mu1", "mu2", "alpha", "beta")
# Run Langevin for one chain
for (i in 2:nIter) {
cat(paste0("Beginning iteration ", i, ".\n"))
### Update v ###
v_prop <- v[i-1, ] + step * gradient_v(v[i-1,]) + sqrt(2*step) * rmvnorm(1, sigma = diag(K))
MHratio <- loglik(t, x, v_prop, mu[i-1,], theta[i-1,], mu1[i-1,], mu2[i-1,], alpha[i-1,], beta[i-1]) -
loglik(t, x, v[i-1,], mu[i-1,], theta[i-1,], mu1[i-1,], mu2[i-1,], alpha[i-1,], beta[i-1]) +
logPriorPi(invLogit(v_prop)) - logPriorPi(invLogit(v[i-1,])) +
sum(log(invLogit(v_prop))) - sum(log(invLogit(v_prop))) # Jacobians
if(runif(1) < exp(MHratio)) {
v[i,] <- v_prop
acc$v <- acc$v + rep(1, K)
} else {
v[i,] <- v[i -1,]
}
### Update mu ###
mu_prop <- mu[i-1, ] + step * gradient_mu(mu[i-1,]) + sqrt(2*step) * rmvnorm(1, sigma = diag(K))
MHratio <- loglik(t, x, v[i,], mu_prop, theta[i-1,], mu1[i-1,], mu2[i-1,], alpha[i-1,], beta[i-1]) -
loglik(t, x, v[i,], mu[i-1,], theta[i-1,], mu1[i-1,], mu2[i-1,], alpha[i-1,], beta[i-1]) +
logPriorMu(mu_prop) - logPriorMu(mu[i-1,])
if(runif(1) < exp(MHratio)) {
mu[i,] <- mu_prop
acc$mu <- acc$mu + rep(1, K)
} else {
mu[i,] <- mu[i -1,]
}
### Update theta ###
theta_prop <- theta[i-1, ] + step * gradient_theta(theta[i-1,]) + sqrt(2*step) * rmvnorm(1, sigma = diag(K))
MHratio <- loglik(t, x, v[i,], mu[i,], theta_prop, mu1[i-1,], mu2[i-1,], alpha[i-1,], beta[i-1]) -
loglik(t, x, v[i,], mu[i,], theta[i-1,], mu1[i-1,], mu2[i-1,], alpha[i-1,], beta[i-1]) +
logPriorSigma2(exp(theta_prop)) - logPriorSigma2(exp(theta[i-1,])) +
sum(theta_prop) - sum(theta[i-1,]) # Log of Jacobian cancels out
if(runif(1) < exp(MHratio)) {
theta[i,] <- theta_prop
acc$theta <- acc$theta + rep(1, K)
} else {
theta[i,] <- theta[i -1,]
}
### Update mu1 ###
mu1_prop <- mu1[i-1, ] + step * gradient_mu1(mu1[i-1,]) + sqrt(2*step) * rmvnorm(1, sigma = diag(K))
MHratio <- loglik(t, x, v[i,], mu[i,], theta[i,], mu1_prop, mu2[i-1,], alpha[i-1,], beta[i-1]) -
loglik(t, x, v[i,], mu[i,], theta[i,], mu1[i-1,], mu2[i-1,], alpha[i-1,], beta[i-1]) +
logPriorMu(mu1_prop) - logPriorMu(mu1[i-1,])
if(runif(1) < exp(MHratio)) {
mu1[i,] <- mu1_prop
acc$mu1 <- acc$mu1 + rep(1, K)
} else {
mu1[i,] <- mu1[i -1,]
}
### Update mu2 ###
mu2_prop <- mu2[i-1, ] + step * gradient_mu2(mu2[i-1,]) + sqrt(2*step) * rmvnorm(1, sigma = diag(K))
MHratio <- loglik(t, x, v[i,], mu[i,], theta[i,], mu1[i,], mu2_prop, alpha[i-1,], beta[i-1]) -
loglik(t, x, v[i,], mu[i,], theta[i,], mu[i,], mu2[i-1,], alpha[i-1,], beta[i-1]) +
logPriorMu(mu2_prop) - logPriorMu(mu2[i-1,])
if(runif(1) < exp(MHratio)) {
mu2[i,] <- mu2_prop
acc$mu2 <- acc$mu2 + rep(1, K)
} else {
mu2[i,] <- mu2[i -1,]
}
### Update alpha ###
alpha_prop <- alpha[i-1, ] + step * gradient_alpha(alpha[i-1,]) + sqrt(2*step) * rmvnorm(1, sigma = diag(K))
MHratio <- loglik(t, x, v[i,], mu[i,], theta[i,], mu1[i,], mu2[i,], alpha_prop, beta[i-1]) -
loglik(t, x, v[i,], mu[i,], theta[i,], mu1[i,], mu2[i,], alpha[i-1,], beta[i-1]) +
logPriorSigma2(exp(alpha_prop)) - logPriorSigma2(exp(alpha[i-1,])) +
sum(alpha_prop) - sum(alpha[i-1,]) # Log of Jacobian cancels out
if(runif(1) < exp(MHratio)) {
alpha[i,] <- alpha_prop
acc$alpha <- acc$alpha + rep(1, K)
} else {
alpha[i,] <- alpha[i -1,]
}
### Update beta ###
beta_prop <- beta[i-1, ] + step * gradient_beta(beta[i-1,]) + sqrt(2*step) * rmvnorm(1, sigma = diag(K))
MHratio <- loglik(t, x, v[i,], mu[i,], theta[i,], mu1[i,], mu2[i,], alpha[i,], beta_prop) -
loglik(t, x, v[i,], mu[i,], theta[i,], mu1[i,], mu2[i,], alpha[i,], beta[i-1]) +
logPriorSigma2(exp(beta_prop)) - logPriorSigma2(exp(beta[i-1,])) +
sum(beta_prop) - sum(beta[i-1,]) # Log of Jacobian cancels out
if(runif(1) < exp(MHratio)) {
beta[i,] <- beta_prop
acc$beta <- acc$beta + rep(1, K)
} else {
beta[i,] <- beta[i -1,]
}
}
head(v)
head(mu)
head(beta)
loglik(t, x, v_prop, mu[i-1,], theta[i-1,], mu1[i-1,], mu2[i-1,], alpha[i-1,], beta[i-1])
loglik(t, x, v[i-1,], mu[i-1,], theta[i-1,], mu1[i-1,], mu2[i-1,], alpha[i-1,], beta[i-1])
MHratio
MHratio <- loglik(t, x, v_prop, mu[i-1,], theta[i-1,], mu1[i-1,], mu2[i-1,], alpha[i-1,], beta[i-1]) -
loglik(t, x, v[i-1,], mu[i-1,], theta[i-1,], mu1[i-1,], mu2[i-1,], alpha[i-1,], beta[i-1]) +
logPriorPi(invLogit(v_prop)) - logPriorPi(invLogit(v[i-1,])) +
sum(log(invLogit(v_prop))) - sum(log(invLogit(v_prop))) # Jacobians
MHrati
MHratio
logPriorPi(invLogit(v_prop)) - logPriorPi(invLogit(v[i-1,])) +
sum(log(invLogit(v_prop))) - sum(log(invLogit(v_prop)))
loglik(t, x, v_prop, mu[i-1,], theta[i-1,], mu1[i-1,], mu2[i-1,], alpha[i-1,], beta[i-1]) -
loglik(t, x, v[i-1,], mu[i-1,], theta[i-1,], mu1[i-1,], mu2[i-1,], alpha[i-1,], beta[i-1]) +
loglik(t, x, v_prop, mu[i-1,], theta[i-1,], mu1[i-1,], mu2[i-1,], alpha[i-1,], beta[i-1]) -
loglik(t, x, v[i-1,], mu[i-1,], theta[i-1,], mu1[i-1,], mu2[i-1,], alpha[i-1,], beta[i-1])
logPriorPi(invLogit(v_prop))
v_prop
invLogit(v_prop)
v[i-1,]
v[i-2,]
invLogit(v[i-1,])
logPriorPi(invLogit(v_prop)) - logPriorPi(invLogit(v[i-1,]))
sum(log(invLogit(v_prop))) - sum(log(invLogit(v_prop)))
invLogit(v_prop)
logPriorPi(1)
langevin_pp(x, t, N, K, starting, step = 0.001, nIter = 100, nBurn = 100, nThin = 2)
source("kernels.R")
source("gradients.R")
source("priors.R")
source("likelihood.R")
source("langevin.R")
library(mvtnorm)
# Dimensions
N <- 1000
n <- 100
# Number of basis functions
K <- 5
# Times
t <- seq(0, 1, length = (n+2))[-c(1, n+2)]
# Spatial locations
x1 <- runif(n)
x2 <- runif(n)
x <- matrix(c(x1, x2), ncol = 2)
# Temporal parameters
mu <- rnorm(K)
sig.sq <- rgamma(K, 1, 2)
theta <- log(sig.sq)
# Spatial parameters
mu1 <- rnorm(K)
mu2 <- rnorm(K)
tau.sq1 <- rgamma(K, 1, 2)
tau.sq2 <- rgamma(K, 1, 2)
alpha <- log(tau.sq1)
beta <- log(tau.sq2)
# Weights and transformed weights
p <- c(0.1, 0.2, 0.25, 0.15, 0.3)
v <- log(p / (1 - p))
# Test out likelihood functions
log(lik(t, x, v, mu, theta, mu1, mu2, alpha, beta))
loglik(t, x, v, mu, theta, mu1, mu2, alpha, beta)
# Test out gradient functions
gradient_v(v)
gradient_mu(mu)
gradient_theta(theta)
gradient_mu1(mu1)
gradient_mu2(mu2)
gradient_alpha(alpha)
gradient_beta(beta)
p
mu
sig.sq
starting <- list(v = v, mu = mu, theta = theta, mu1 = mu1, mu2 = mu2, alpha = alpha, beta = beta)
langevin_pp(x, t, N, K, starting, step = 0.001, nIter = 100, nBurn = 100, nThin = 2)
source("kernels.R")
source("gradients.R")
source("priors.R")
source("likelihood.R")
source("langevin.R")
library(mvtnorm)
# Dimensions
N <- 500
n <- 100
# Number of basis functions
K <- 5
# Times
t <- seq(0, 1, length = (n+2))[-c(1, n+2)]
# Spatial locations
x1 <- runif(n)
x2 <- runif(n)
x <- matrix(c(x1, x2), ncol = 2)
# Temporal parameters
mu <- rnorm(K)
sig.sq <- rgamma(K, 1, 2)
theta <- log(sig.sq)
# Spatial parameters
mu1 <- rnorm(K)
mu2 <- rnorm(K)
tau.sq1 <- rgamma(K, 1, 2)
tau.sq2 <- rgamma(K, 1, 2)
alpha <- log(tau.sq1)
beta <- log(tau.sq2)
# Weights and transformed weights
p <- c(0.1, 0.2, 0.25, 0.15, 0.3)
v <- log(p / (1 - p))
# Test out likelihood functions
log(lik(t, x, v, mu, theta, mu1, mu2, alpha, beta))
loglik(t, x, v, mu, theta, mu1, mu2, alpha, beta)
# Test out gradient functions
gradient_v(v)
gradient_mu(mu)
gradient_theta(theta)
gradient_mu1(mu1)
gradient_mu2(mu2)
gradient_alpha(alpha)
gradient_beta(beta)
p
mu
sig.sq
starting <- list(v = v, mu = mu, theta = theta, mu1 = mu1, mu2 = mu2, alpha = alpha, beta = beta)
langevin_pp(x, t, N, K, starting, step = 0.00001, nIter = 100, nBurn = 10, nThin = 2)
source("kernels.R")
source("gradients.R")
source("priors.R")
source("likelihood.R")
source("langevin.R")
library(mvtnorm)
# Dimensions
N <- 500
n <- 100
# Number of basis functions
K <- 5
# Times
t <- seq(0, 1, length = (n+2))[-c(1, n+2)]
# Spatial locations
x1 <- runif(n)
x2 <- runif(n)
x <- matrix(c(x1, x2), ncol = 2)
# Temporal parameters
mu <- rnorm(K)
sig.sq <- rgamma(K, 1, 2)
theta <- log(sig.sq)
# Spatial parameters
mu1 <- rnorm(K)
mu2 <- rnorm(K)
tau.sq1 <- rgamma(K, 1, 2)
tau.sq2 <- rgamma(K, 1, 2)
alpha <- log(tau.sq1)
beta <- log(tau.sq2)
# Weights and transformed weights
p <- c(0.1, 0.2, 0.25, 0.15, 0.3)
v <- log(p / (1 - p))
# Test out likelihood functions
log(lik(t, x, v, mu, theta, mu1, mu2, alpha, beta))
loglik(t, x, v, mu, theta, mu1, mu2, alpha, beta)
# Test out gradient functions
gradient_v(v)
gradient_mu(mu)
gradient_theta(theta)
gradient_mu1(mu1)
gradient_mu2(mu2)
gradient_alpha(alpha)
gradient_beta(beta)
p
mu
sig.sq
starting <- list(v = v, mu = mu, theta = theta, mu1 = mu1, mu2 = mu2, alpha = alpha, beta = beta)
step_sizes <- c(0.001, 0.0001, 0.00001, 1e-10, 1e-10, 1e-10, 1e-10)
langevin_pp(x, t, N, K, starting, step = step_sizes, nIter = 100, nBurn = 10, nThin = 2)
mu
starting <- list(v = v, mu = mu, theta = theta, mu1 = mu1, mu2 = mu2, alpha = alpha, beta = beta)
step_sizes <- c(0.0001, 0.00001, 1e-6, 1e-6, 1e-16, 1e-6, 1e-16)
langevin_pp(x, t, N, K, starting, step = step_sizes, nIter = 100, nBurn = 10, nThin = 2)
p
mu
sig.sq
source("kernels.R")
source("gradients.R")
source("priors.R")
source("likelihood.R")
source("langevin.R")
library(mvtnorm)
# Dimensions
N <- 500
n <- 100
# Number of basis functions
K <- 5
# Times
t <- seq(0, 1, length = (n+2))[-c(1, n+2)]
# Spatial locations
x1 <- runif(n)
x2 <- runif(n)
x <- matrix(c(x1, x2), ncol = 2)
# Temporal parameters
mu <- rnorm(K)
sig.sq <- rgamma(K, 1, 2)
theta <- log(sig.sq)
# Spatial parameters
mu1 <- rnorm(K)
mu2 <- rnorm(K)
tau.sq1 <- rgamma(K, 1, 2)
tau.sq2 <- rgamma(K, 1, 2)
alpha <- log(tau.sq1)
beta <- log(tau.sq2)
# Weights and transformed weights
p <- c(0.1, 0.2, 0.25, 0.15, 0.3)
v <- log(p / (1 - p))
# Test out likelihood functions
log(lik(t, x, v, mu, theta, mu1, mu2, alpha, beta))
loglik(t, x, v, mu, theta, mu1, mu2, alpha, beta)
# Test out gradient functions
gradient_v(v)
gradient_mu(mu)
gradient_theta(theta)
gradient_mu1(mu1)
gradient_mu2(mu2)
gradient_alpha(alpha)
gradient_beta(beta)
p
mu
sig.sq
starting <- list(v = v, mu = mu, theta = theta, mu1 = mu1, mu2 = mu2, alpha = alpha, beta = beta)
step_sizes <- c(0.001, 0.0001, 1e-5, 1e-5, 1e-16, 1e-4, 1e-5)
langevin_pp(x, t, N, K, starting, step = step_sizes, nIter = 100, nBurn = 10, nThin = 2)
