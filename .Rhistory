step_sizes <- c(1e-3, 1e-4, 3e-6, 3e-6, 1e-16, 5e-8, 1e-7)
model <- langevin_pp(x = x, t, N, K, starting, step = step_sizes, nIter = 50, nBurn = 10, nThin = 2)
f_true <- sapply(1:n, function(i) {
sum(sapply(1:K, function(j) {
k(t[i], x[i,1], x[i,2],
mu[j], log(sig.sq[j]),
mu1[j], mu2[j],
log(tau.sq1[j]), log(tau.sq2[j])) * p[j]
}))
})
f_est <- sapply(1:n, function(i) {
sum(sapply(1:K, function(j) {
k(t[i], x[i,1], x[i,2],
model$posteriorMeans$mu[j], log(model$posteriorMeans$sigma.sq[j]),
model$posteriorMeans$mu1[j], model$posteriorMeans$mu2[j],
log(model$posteriorMeans$tau.sq1[j]), log(model$posteriorMeans$tau.sq2[j])) *
model$posteriorMeans$pi[j]
}))
})
df_true <- data.frame(x=x[,1], y=x[,2], f=f_true)
df_est <- data.frame(x=x[,1], y=x[,2], f=f_est)
lims <- c(0, 52)
ggplot(data=df_true, aes(x, y, height=0.05, width=0.05)) +
geom_tile(aes(fill = f)) +
scale_fill_distiller(palette = "Spectral", na.value = NA, limits = lims) +
theme_classic()
ggplot(data=df_est, aes(x, y, height=0.05, width=0.05)) +
geom_tile(aes(fill = f)) +
scale_fill_distiller(palette = "Spectral", na.value = NA, limits = lims) +
theme_classic()
lims <- c(0,26)
library(interp)
df_true <- interp(x[,1], x[,2], f_true, nx = 50, ny = 50) |>
interp2xyz() |>
as.data.frame()
ggplot(data = df_true, aes(x, y)) +
geom_raster(aes(fill = z)) +
scale_fill_distiller(palette = "Spectral", na.value = NA, limits = lims) +
theme_classic() +
ggtitle("Linear interpolation")
df_est <- interp(x[,1], x[,2], f_est, nx = 50, ny = 50) |>
interp2xyz() |>
as.data.frame()
ggplot(data = df_est, aes(x, y)) +
geom_raster(aes(fill = z)) +
scale_fill_distiller(palette = "Spectral", na.value = NA, limits = lims) +
theme_classic() +
ggtitle("Linear interpolation")
lims <- c(0, max(f_est))
lims
lims <- c(0, max(f_est))
ggplot(data=df_true, aes(x, y, height=0.05, width=0.05)) +
geom_tile(aes(fill = f)) +
scale_fill_distiller(palette = "Spectral", na.value = NA, limits = lims) +
theme_classic()
df_true <- data.frame(x=x[,1], y=x[,2], f=f_true)
df_est <- data.frame(x=x[,1], y=x[,2], f=f_est)
lims <- c(0, max(f_est))
ggplot(data=df_true, aes(x, y, height=0.05, width=0.05)) +
geom_tile(aes(fill = f)) +
scale_fill_distiller(palette = "Spectral", na.value = NA, limits = lims) +
theme_classic()
ggplot(data=df_est, aes(x, y, height=0.05, width=0.05)) +
geom_tile(aes(fill = f)) +
scale_fill_distiller(palette = "Spectral", na.value = NA, limits = lims) +
theme_classic()
lims <- c(0,26)
library(interp)
library(interp)
df_true <- interp(x[,1], x[,2], f_true, nx = 50, ny = 50) |>
interp2xyz() |>
as.data.frame()
lims <- c(0, max(f_est))
ggplot(data = df_true, aes(x, y)) +
geom_raster(aes(fill = z)) +
scale_fill_distiller(palette = "Spectral", na.value = NA, limits = lims) +
theme_classic() +
ggtitle("Linear interpolation")
df_est <- interp(x[,1], x[,2], f_est, nx = 50, ny = 50) |>
interp2xyz() |>
as.data.frame()
ggplot(data = df_est, aes(x, y)) +
geom_raster(aes(fill = z)) +
scale_fill_distiller(palette = "Spectral", na.value = NA, limits = lims) +
theme_classic() +
ggtitle("Linear interpolation")
model$acceptance
source("kernels.R")
source("gradients.R")
source("priors.R")
source("likelihood.R")
source("langevin.R")
library(mvtnorm)
library(ggplot2)
library(spatstat)
str(lansing)
summary(lansing$x)
summary(lansing$y)
N <- lansing$n
n <- 100
set.seed(123)
subset <- sample(1:N, n)
x <- cbind(x1 = lansing$x[subset], x2 = lansing$y[subset])
K <- 10
t <- rep(0.5, n)
# Temporal parameters
mu <- rnorm(K)
sig.sq <- rgamma(K, 1, 2)
theta <- log(sig.sq)
# Spatial parameters
mu1 <- rnorm(K)
mu2 <- rnorm(K)
tau.sq1 <- rgamma(K, 1, 2)
tau.sq2 <- rgamma(K, 1, 2)
alpha <- log(tau.sq1)
beta <- log(tau.sq2)
# Weights and transformed weights
p <- rep(1/K, K)
v <- log(p / (1 - p))
starting <- list(v = v, mu = mu, theta = theta, mu1 = mu1, mu2 = mu2, alpha = alpha, beta = beta)
step_sizes <- c(1e-3, 1e-4, 3e-6, 1e-16, 1e-16, 5e-8, 1e-7)
model <- langevin_pp(x = x, t, N, K, starting, step = step_sizes, nIter = 50, nBurn = 10, nThin = 2)
f_true <- sapply(1:n, function(i) {
sum(sapply(1:K, function(j) {
k(t[i], x[i,1], x[i,2],
mu[j], log(sig.sq[j]),
mu1[j], mu2[j],
log(tau.sq1[j]), log(tau.sq2[j])) * p[j]
}))
})
f_est <- sapply(1:n, function(i) {
sum(sapply(1:K, function(j) {
k(t[i], x[i,1], x[i,2],
model$posteriorMeans$mu[j], log(model$posteriorMeans$sigma.sq[j]),
model$posteriorMeans$mu1[j], model$posteriorMeans$mu2[j],
log(model$posteriorMeans$tau.sq1[j]), log(model$posteriorMeans$tau.sq2[j])) *
model$posteriorMeans$pi[j]
}))
})
df_true <- data.frame(x=x[,1], y=x[,2], f=f_true)
df_est <- data.frame(x=x[,1], y=x[,2], f=f_est)
lims <- c(0, max(f_est))
ggplot(data=df_true, aes(x, y, height=0.05, width=0.05)) +
geom_tile(aes(fill = f)) +
scale_fill_distiller(palette = "Spectral", na.value = NA, limits = lims) +
theme_classic()
ggplot(data=df_est, aes(x, y, height=0.05, width=0.05)) +
geom_tile(aes(fill = f)) +
scale_fill_distiller(palette = "Spectral", na.value = NA, limits = lims) +
theme_classic()
library(interp)
df_true <- interp(x[,1], x[,2], f_true, nx = 50, ny = 50) |>
interp2xyz() |>
as.data.frame()
ggplot(data = df_true, aes(x, y)) +
geom_raster(aes(fill = z)) +
scale_fill_distiller(palette = "Spectral", na.value = NA, limits = lims) +
theme_classic() +
ggtitle("Linear interpolation")
df_est <- interp(x[,1], x[,2], f_est, nx = 50, ny = 50) |>
interp2xyz() |>
as.data.frame()
ggplot(data = df_est, aes(x, y)) +
geom_raster(aes(fill = z)) +
scale_fill_distiller(palette = "Spectral", na.value = NA, limits = lims) +
theme_classic() +
ggtitle("Linear interpolation")
source("kernels.R")
source("gradients.R")
source("priors.R")
source("likelihood.R")
source("langevin.R")
library(mvtnorm)
library(ggplot2)
library(spatstat)
str(lansing)
summary(lansing$x)
summary(lansing$y)
N <- lansing$n
n <- 100
set.seed(123)
subset <- sample(1:N, n)
x <- cbind(x1 = lansing$x[subset], x2 = lansing$y[subset])
K <- 10
t <- rep(0.5, n)
# Temporal parameters
mu <- rnorm(K)
sig.sq <- rgamma(K, 1, 2)
theta <- log(sig.sq)
# Spatial parameters
mu1 <- rnorm(K)
mu2 <- rnorm(K)
tau.sq1 <- rgamma(K, 1, 2)
tau.sq2 <- rgamma(K, 1, 2)
alpha <- log(tau.sq1)
beta <- log(tau.sq2)
# Weights and transformed weights
p <- rep(1/K, K)
v <- log(p / (1 - p))
starting <- list(v = v, mu = mu, theta = theta, mu1 = mu1, mu2 = mu2, alpha = alpha, beta = beta)
starting <- list(v = v, mu = rnorm(K), theta = log(rgamma(K, 1, 2)),
mu1 = rnorm(K), mu2 = rnorm(K),
alpha = log(rgamma(K, 1, 2)), beta = log(rgamma(K, 1, 2)))
step_sizes <- c(1e-3, 1e-4, 3e-6, 1e-16, 1e-16, 5e-8, 1e-7)
model <- langevin_pp(x = x, t, N, K, starting, step = step_sizes, nIter = 50, nBurn = 10, nThin = 2)
f_true <- sapply(1:n, function(i) {
sum(sapply(1:K, function(j) {
k(t[i], x[i,1], x[i,2],
mu[j], log(sig.sq[j]),
mu1[j], mu2[j],
log(tau.sq1[j]), log(tau.sq2[j])) * p[j]
}))
})
f_est <- sapply(1:n, function(i) {
sum(sapply(1:K, function(j) {
k(t[i], x[i,1], x[i,2],
model$posteriorMeans$mu[j], log(model$posteriorMeans$sigma.sq[j]),
model$posteriorMeans$mu1[j], model$posteriorMeans$mu2[j],
log(model$posteriorMeans$tau.sq1[j]), log(model$posteriorMeans$tau.sq2[j])) *
model$posteriorMeans$pi[j]
}))
})
df_true <- data.frame(x=x[,1], y=x[,2], f=f_true)
df_est <- data.frame(x=x[,1], y=x[,2], f=f_est)
lims <- c(0, max(f_est))
ggplot(data=df_true, aes(x, y, height=0.05, width=0.05)) +
geom_tile(aes(fill = f)) +
scale_fill_distiller(palette = "Spectral", na.value = NA, limits = lims) +
theme_classic()
ggplot(data=df_est, aes(x, y, height=0.05, width=0.05)) +
geom_tile(aes(fill = f)) +
scale_fill_distiller(palette = "Spectral", na.value = NA, limits = lims) +
theme_classic()
library(interp)
df_true <- interp(x[,1], x[,2], f_true, nx = 50, ny = 50) |>
interp2xyz() |>
as.data.frame()
ggplot(data = df_true, aes(x, y)) +
geom_raster(aes(fill = z)) +
scale_fill_distiller(palette = "Spectral", na.value = NA, limits = lims) +
theme_classic() +
ggtitle("Linear interpolation")
df_est <- interp(x[,1], x[,2], f_est, nx = 50, ny = 50) |>
interp2xyz() |>
as.data.frame()
ggplot(data = df_est, aes(x, y)) +
geom_raster(aes(fill = z)) +
scale_fill_distiller(palette = "Spectral", na.value = NA, limits = lims) +
theme_classic() +
ggtitle("Linear interpolation")
library(ggplot2)
class <- rep(c("201", "302", "303"), 10)
semester <- rep(c("Fall 2020", "Spring 2021", "Summer 2021", "Fall 2021",
"Spring 2022", "Summer 2022", "Fall 2023"), each = 3)
semester <- rep(c("Fall 2020", "Spring 2021", "Summer 2021", "Fall 2021",
"Spring 2022", "Summer 2022", "Fall 2022",
"Spring 2023", "Summer 2023", "Fall 2023"), each = 3)
students <- c(678, 1053, 434, 810, 740, 349, 109, 221, 95, 711, 816, 393,
853, 671, 349, 77, 139, 96, 756, 720, 302, 866, 723, 365,
128, 181, 103, 815, 843, 327)
library(ggplot2)
dat <- data.frame(class=class, semester=semester, students=students)
ggplot(data=dat, aes(x=semester, y=students, fill=class)) + geom_bar()
dat
ggplot(data=dat, aes(x=semester, y=students, fill=class)) + geom_bar(stat='identity')
semester <- as.factor(rep(c("Fall 2020", "Spring 2021", "Summer 2021", "Fall 2021",
"Spring 2022", "Summer 2022", "Fall 2022",
"Spring 2023", "Summer 2023", "Fall 2023"), each = 3))
students <- c(678, 1053, 434, 810, 740, 349, 109, 221, 95, 711, 816, 393,
853, 671, 349, 77, 139, 96, 756, 720, 302, 866, 723, 365,
128, 181, 103, 815, 843, 327)
library(ggplot2)
dat <- data.frame(class=class, semester=semester, students=students)
ggplot(data=dat, aes(x=semester, y=students, fill=class)) + geom_bar(stat='identity')
semester <- factor(rep(sems, each = 3), levels=sems)
sems <- c("Fall 2020", "Spring 2021", "Summer 2021", "Fall 2021",
"Spring 2022", "Summer 2022", "Fall 2022",
"Spring 2023", "Summer 2023", "Fall 2023")
semester <- factor(rep(sems, each = 3), levels=sems)
students <- c(678, 1053, 434, 810, 740, 349, 109, 221, 95, 711, 816, 393,
853, 671, 349, 77, 139, 96, 756, 720, 302, 866, 723, 365,
128, 181, 103, 815, 843, 327)
library(ggplot2)
dat <- data.frame(class=class, semester=semester, students=students)
ggplot(data=dat, aes(x=semester, y=students, fill=class)) + geom_bar(stat='identity')
ggplot(data=dat, aes(x=semester, y=students, fill=class)) +
geom_bar(stat='identity') +
theme(axis.text.x = element_text(angle=90))
ggplot(data=dat, aes(x=semester, y=students, fill=class)) +
geom_bar(stat='identity') +
theme(axis.text.x = element_text(angle=60))
ggplot(data=dat, aes(x=semester, y=students, fill=class)) +
geom_bar(stat='identity') +
theme(axis.text.x = element_text(angle=45))
ggplot(data=dat, aes(x=semester, y=students, fill=class)) +
geom_bar(stat='identity') +
theme(axis.text.x = element_text(angle=45), vjust=-5)
ggplot(data=dat, aes(x=semester, y=students, fill=class)) +
geom_bar(stat='identity') +
theme(axis.text.x = element_text(angle=45, vjust=-5))
ggplot(data=dat, aes(x=semester, y=students, fill=class)) +
geom_bar(stat='identity') +
theme(axis.text.x = element_text(angle=45, vjust=-1))
ggplot(data=dat, aes(x=semester, y=students, fill=class)) +
geom_bar(stat='identity') +
theme(axis.text.x = element_text(angle=45, vjust=1))
ggplot(data=dat, aes(x=semester, y=students, fill=class)) +
geom_bar(stat='identity') +
theme(axis.text.x = element_text(angle=45, vjust=0.1))
ggplot(data=dat, aes(x=semester, y=students, fill=class)) +
geom_bar(stat='identity') +
theme(axis.text.x = element_text(angle=45, vjust=0.5))
ggplot(data=dat, aes(x=semester, y=students, fill=class)) +
geom_bar(stat='identity') +
theme(axis.text.x = element_text(angle=45, vjust=0.7))
ggplot(data=dat, aes(x=semester, y=students, fill=class)) +
geom_bar(stat='identity') +
theme(axis.text.x = element_text(angle=45, vjust=0.7)) +
theme_classic()
theme(axis.text.x = element_text(angle=45, vjust=0.7))
dat <- data.frame(class=class, semester=semester, students=students)
ggplot(data=dat, aes(x=semester, y=students, fill=class)) +
geom_bar(stat='identity') +
theme_classic()
ggplot(data=dat, aes(x=semester, y=students, fill=class)) +
geom_bar(stat='identity') +
theme_bw()
ggplot(data=dat, aes(x=semester, y=students, fill=class)) +
geom_bar(stat='identity') +
theme_bw(axis.text.x = element_text(angle=45, vjust=0.7))
ggplot(data=dat, aes(x=semester, y=students, fill=class)) +
geom_bar(stat='identity') +
theme(axis.text.x = element_text(angle=45, vjust=0.7))
ggplot(data=dat, aes(x=semester, y=students, fill=class)) +
geom_bar(stat='identity') +
theme_classic() +
theme(axis.text.x = element_text(angle=45, vjust=0.7))
ggplot(data=dat, aes(x=semester, y=students, fill=class)) +
geom_bar(stat='identity') +
theme_classic() +
theme(axis.text.x = element_text(angle=45, vjust=0.6))
theme_classic() +
theme(axis.text.x = element_text(angle=45, vjust=0.6))
ggplot(data=dat, aes(x=semester, y=students, fill=class)) +
geom_bar(stat='identity') +
labs(x = "", y = "Number of Students")
ggplot(data=dat, aes(x=semester, y=students, fill=class)) +
geom_bar(stat='identity') +
labs(x = "", y = "Number of Students") +
theme_classic() +
theme(axis.text.x = element_text(angle=45, vjust=0.6))
ggplot(data=dat, aes(x=semester, y=students, fill=class)) +
geom_bar(stat='identity') +
labs(x = "", y = "", main = "Number of Students  by Semester") +
theme_classic() +
theme(axis.text.x = element_text(angle=45, vjust=0.6))
ggplot(data=dat, aes(x=semester, y=students, fill=class)) +
geom_bar(stat='identity') +
labs(x = "", y = "", title = "Number of Students  by Semester") +
theme_classic() +
theme(axis.text.x = element_text(angle=45, vjust=0.6))
ggplot(data=dat, aes(x=semester, y=students, fill=class)) +
geom_bar(stat='identity') +
labs(x = "", y = "", title = "Number of Students  by Semester") +
theme_classic() +
theme(axis.text.x = element_text(angle=45, vjust=0.6)) +
scale_fill_discrete(name = "Course")
ggplot(data=dat, aes(x=semester, y=students, fill=class)) +
geom_bar(stat='identity') +
labs(x = "", y = "", title = "Number of Students  by Semester") +
theme_classic() +
theme(axis.text.x = element_text(angle=45, vjust=0.6),
title = element_text(hjust = 0.5)) +
scale_fill_discrete(name = "Course")
ggplot(data=dat, aes(x=semester, y=students, fill=class)) +
geom_bar(stat='identity') +
labs(x = "", y = "", title = "Number of Students  by Semester") +
theme_classic() +
theme(axis.text.x = element_text(angle=45, vjust=0.6),
plot.title = element_text(hjust = 0.5)) +
scale_fill_discrete(name = "Course")
ggplot(data=dat, aes(x=semester, y=students, fill=class)) +
geom_bar(stat='identity') +
labs(x = "", y = "", title = "Number of Students by Semester") +
theme_classic() +
theme(axis.text.x = element_text(angle=45, vjust=0.6),
plot.title = element_text(hjust = 0.5)) +
scale_fill_discrete(name = "Course")
setwd("~/research/point_processes")
source("kernels.R")
source("gradients.R")
source("priors.R")
source("likelihood.R")
source("langevin.R")
library(mvtnorm)
library(ggplot2)
library(spatstat)
str(lansing)
summary(lansing$x)
summary(lansing$y)
N <- lansing$n
n <- 100
set.seed(123)
subset <- sample(1:N, n)
x <- cbind(x1 = lansing$x[subset], x2 = lansing$y[subset])
K <- 10
t <- rep(0.5, n)
# Temporal parameters
mu <- rnorm(K)
sig.sq <- rgamma(K, 1, 2)
theta <- log(sig.sq)
# Spatial parameters
mu1 <- rnorm(K)
mu2 <- rnorm(K)
tau.sq1 <- rgamma(K, 1, 2)
tau.sq2 <- rgamma(K, 1, 2)
alpha <- log(tau.sq1)
beta <- log(tau.sq2)
# Weights and transformed weights
p <- rep(1/K, K)
v <- log(p / (1 - p))
mu
rnorm(K, 0.1)
rnorm(K, 0.01)
rnorm(K, 0, 0.1)
rnorm(K, 0, 0.01)
rnorm(K, 0, 0.05)
loglik(t, x, v, mu, theta, mu1[i-1,], mu2[i-1,], alpha[i-1,], beta[i-1])
loglik(t, x, v, mu, theta, mu1, mu2, alpha, beta)
mu
loglik(t, x, v, mu+0.5, theta, mu1, mu2, alpha, beta)
loglik(t, x, v, mu+0.1, theta, mu1, mu2, alpha, beta)
loglik(t, x, v, mu-0.1, theta, mu1, mu2, alpha, beta)
loglik(t, x, v, mu-1, theta, mu1, mu2, alpha, beta)
loglik(t, x, v, mu-0.4, theta, mu1, mu2, alpha, beta)
loglik(t, x, v, mu-0.7, theta, mu1, mu2, alpha, beta)
loglik(t, x, v, mu, theta+0.1, mu1, mu2, alpha, beta)
loglik(t, x, v, mu, theta-0.1, mu1, mu2, alpha, beta)
loglik(t, x, v, mu, theta-0.8, mu1, mu2, alpha, beta)
loglik(t, x, v, mu, theta-5.8, mu1, mu2, alpha, beta)
loglik(t, x, v, mu, theta-1.8, mu1, mu2, alpha, beta)
loglik(t, x, v, mu, theta-1.4, mu1, mu2, alpha, beta)
loglik(t, x, v, mu, theta-1, mu1, mu2, alpha, beta)
loglik(t, x, v, mu, theta-2, mu1, mu2, alpha, beta)
k <- seq(-2, 2, by=0.1)
likTheta <- sapply(k, \(i) loglik(t, x, v, mu, theta+k, mu1, mu2, alpha, beta))
likTheta <- sapply(k, \(i) loglik(t, x, v, mu, theta+i, mu1, mu2, alpha, beta))
k
likTheta <- sapply(k, \(i) loglik(t, x, v, mu, theta+i, mu1, mu2, alpha, beta))
a <- seq(-2, 2, by=0.1)
k <- function(t, x1, x2, mu, theta, mu1, mu2, alpha, beta) {
k_t(t, mu, theta) * k_s(x1, x2, mu1, mu2, alpha, beta)
}
likTheta <- sapply(a, \(i) loglik(t, x, v, mu, theta+i, mu1, mu2, alpha, beta))
plot(a, likTheta)
a <- seq(-3, 3, by = 0.1)
likTheta <- sapply(a, \(i) loglik(t, x, v, mu, theta+i, mu1, mu2, alpha, beta))
plot(a, likTheta)
likMu <- sapply(a, \(i) loglik(t, x, v, mu+i, theta, mu1, mu2, alpha, beta))
plot(a, likMu)
likMu1 <- sapply(a, \(i) loglik(t, x, v, mu, theta, mu1+i, mu2, alpha, beta))
plot(a, likMu1)
likMu2 <- sapply(a, \(i) loglik(t, x, v, mu, theta, mu1, mu2+i, alpha, beta))
plot(a, likMu2)
likAlpha <- sapply(a, \(i) loglik(t, x, v, mu, theta, mu1, mu2, alpha+i, beta))
plot(a, likAlpha)
likBeta <- sapply(a, \(i) loglik(t, x, v, mu, theta, mu1, mu2, alpha, beta+i))
plot(a, likBeta)
alpha
beta
loglik(t, x, v, mu, theta, mu1, mu2, alpha+100, beta+100)
loglik(t, x, v, mu, theta, mu1, mu2, alpha, beta)
a <- seq(-1, 8, by = 0.1)
likAlpha <- sapply(a, \(i) loglik(t, x, v, mu, theta, mu1, mu2, alpha+i, beta))
plot(a, likAlpha)
likBeta <- sapply(a, \(i) loglik(t, x, v, mu, theta, mu1, mu2, alpha, beta+i))
plot(a, likBeta)
set.seed(97)
subset <- sample(1:N, n)
x <- cbind(x1 = lansing$x[subset], x2 = lansing$y[subset])
K <- 10
t <- rep(0.5, n)
# Temporal parameters
mu <- rnorm(K)
sig.sq <- rgamma(K, 1, 2)
theta <- log(sig.sq)
# Spatial parameters
mu1 <- rnorm(K)
mu2 <- rnorm(K)
tau.sq1 <- rgamma(K, 1, 2)
tau.sq2 <- rgamma(K, 1, 2)
alpha <- log(tau.sq1)
beta <- log(tau.sq2)
# Weights and transformed weights
p <- rep(1/K, K)
v <- log(p / (1 - p))
a <- seq(-3, 3, by = 0.1)
likMu <- sapply(a, \(i) loglik(t, x, v, mu+i, theta, mu1, mu2, alpha, beta))
plot(a, likMu)
likTheta <- sapply(a, \(i) loglik(t, x, v, mu, theta+i, mu1, mu2, alpha, beta))
plot(a, likTheta)
likMu1 <- sapply(a, \(i) loglik(t, x, v, mu, theta, mu1+i, mu2, alpha, beta))
plot(a, likMu1)
likMu2 <- sapply(a, \(i) loglik(t, x, v, mu, theta, mu1, mu2+i, alpha, beta))
plot(a, likMu2)
a <- seq(-1, 8, by = 0.1)
likAlpha <- sapply(a, \(i) loglik(t, x, v, mu, theta, mu1, mu2, alpha+i, beta))
plot(a, likAlpha)
likBeta <- sapply(a, \(i) loglik(t, x, v, mu, theta, mu1, mu2, alpha, beta+i))
plot(a, likBeta)
nrow(x)
N
