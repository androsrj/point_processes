
R version 4.2.0 (2022-04-22) -- "Vigorous Calisthenics"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> source("kernels.R")
> source("gradients.R")
> source("priors.R")
> source("likelihood.R")
> source("langevin.R")
> library(mvtnorm)
> library(ggplot2)
> library(spatstat)
Loading required package: spatstat.data
Loading required package: spatstat.geom
spatstat.geom 3.2-9
Loading required package: spatstat.random
spatstat.random 3.2-3
Loading required package: spatstat.explore
Loading required package: nlme
spatstat.explore 3.2-6
Loading required package: spatstat.model
Loading required package: rpart
spatstat.model 3.2-10
Loading required package: spatstat.linnet
spatstat.linnet 3.1-4

spatstat 3.0-7 
For an introduction to spatstat, type ‘beginner’ 

> str(lansing)
List of 6
 $ window    :List of 4
  ..$ type  : chr "rectangle"
  ..$ xrange: num [1:2] 0 1
  ..$ yrange: num [1:2] 0 1
  ..$ units :List of 3
  .. ..$ singular  : chr "foot"
  .. ..$ plural    : chr "feet"
  .. ..$ multiplier: num 924
  .. ..- attr(*, "class")= chr "unitname"
  ..- attr(*, "class")= chr "owin"
 $ n         : int 2251
 $ x         : num [1:2251] 0.078 0.076 0.051 0.015 0.03 0.102 0.135 0.121 0.04 0.065 ...
 $ y         : num [1:2251] 0.091 0.266 0.225 0.366 0.426 0.474 0.498 0.489 0.596 0.608 ...
 $ markformat: chr "vector"
 $ marks     : Factor w/ 6 levels "blackoak","hickory",..: 1 1 1 1 1 1 1 1 1 1 ...
 - attr(*, "class")= chr "ppp"
> summary(lansing$x)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0010  0.2290  0.4970  0.4937  0.7520  1.0000 
> summary(lansing$y)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.2370  0.5080  0.5012  0.7510  0.9910 
> 
> N <- lansing$n
> n <- 100
> set.seed(123)
> subset <- sample(1:N, n)
> x <- cbind(x1 = lansing$x[subset], x2 = lansing$y[subset])
> K <- 10
> t <- rep(0.5, n)
> 
> # Temporal parameters
> mu <- rnorm(K)
> sig.sq <- rgamma(K, 1, 2)
> theta <- log(sig.sq)
> 
> # Spatial parameters
> mu1 <- rnorm(K)
> mu2 <- rnorm(K)
> tau.sq1 <- rgamma(K, 1, 2)
> tau.sq2 <- rgamma(K, 1, 2)
> alpha <- log(tau.sq1)
> beta <- log(tau.sq2)
> 
> # Weights and transformed weights
> p <- rep(1/K, K)
> v <- log(p / (1 - p))
> 
> #starting <- list(v = v, mu = mu, theta = theta, mu1 = mu1, mu2 = mu2, alpha = alpha, beta = beta)
> starting <- list(v = v, mu = mu + rnorm(K, 0, 0.1), 
+ 		 theta = theta + rnorm(K, 0, 0.1), 
+                  mu1 = mu1 + rnorm(K, 0, 0.1), mu2 = mu2 + rnorm(K, 0, 0.1), 
+                  alpha = alpha + rnorm(K, 0, 0.1), beta = beta + rnorm(K, 0, 0.1))
> step_sizes <- c(1e-3, 1e-4, 3e-6, 1e-16, 1e-16, 5e-8, 1e-7)
> model <- langevin_pp(x = x, t, N, K, starting, step = step_sizes, nIter = 100, nBurn = 10, nThin = 2)
Beginning iteration 2.
Beginning iteration 3.
Beginning iteration 4.
Beginning iteration 5.
Beginning iteration 6.
Beginning iteration 7.
Beginning iteration 8.
Beginning iteration 9.
Beginning iteration 10.
Beginning iteration 11.
Beginning iteration 12.
Beginning iteration 13.
Beginning iteration 14.
Beginning iteration 15.
Beginning iteration 16.
Beginning iteration 17.
Beginning iteration 18.
Beginning iteration 19.
Beginning iteration 20.
Beginning iteration 21.
Beginning iteration 22.
Beginning iteration 23.
Beginning iteration 24.
Beginning iteration 25.
Beginning iteration 26.
Beginning iteration 27.
Beginning iteration 28.
Beginning iteration 29.
Beginning iteration 30.
Beginning iteration 31.
Beginning iteration 32.
Beginning iteration 33.
Beginning iteration 34.
Beginning iteration 35.
Beginning iteration 36.
Beginning iteration 37.
Beginning iteration 38.
Beginning iteration 39.
Beginning iteration 40.
Beginning iteration 41.
Beginning iteration 42.
Beginning iteration 43.
Beginning iteration 44.
Beginning iteration 45.
Beginning iteration 46.
Beginning iteration 47.
Beginning iteration 48.
Beginning iteration 49.
Beginning iteration 50.
Beginning iteration 51.
Beginning iteration 52.
Beginning iteration 53.
Beginning iteration 54.
Beginning iteration 55.
Beginning iteration 56.
Beginning iteration 57.
Beginning iteration 58.
Beginning iteration 59.
Beginning iteration 60.
Beginning iteration 61.
Beginning iteration 62.
Beginning iteration 63.
Beginning iteration 64.
Beginning iteration 65.
Beginning iteration 66.
Beginning iteration 67.
Beginning iteration 68.
Beginning iteration 69.
Beginning iteration 70.
Beginning iteration 71.
Beginning iteration 72.
Beginning iteration 73.
Beginning iteration 74.
Beginning iteration 75.
Beginning iteration 76.
Beginning iteration 77.
Beginning iteration 78.
Beginning iteration 79.
Beginning iteration 80.
Beginning iteration 81.
Beginning iteration 82.
Beginning iteration 83.
Beginning iteration 84.
Beginning iteration 85.
Beginning iteration 86.
Beginning iteration 87.
Beginning iteration 88.
Beginning iteration 89.
Beginning iteration 90.
Beginning iteration 91.
Beginning iteration 92.
Beginning iteration 93.
Beginning iteration 94.
Beginning iteration 95.
Beginning iteration 96.
Beginning iteration 97.
Beginning iteration 98.
Beginning iteration 99.
Beginning iteration 100.
Beginning iteration 101.
Beginning iteration 102.
Beginning iteration 103.
Beginning iteration 104.
Beginning iteration 105.
Beginning iteration 106.
Beginning iteration 107.
Beginning iteration 108.
Beginning iteration 109.
Beginning iteration 110.
> 
> f_true <- sapply(1:n, function(i) {
+   sum(sapply(1:K, function(j) {
+     k(t[i], x[i,1], x[i,2],
+       mu[j], log(sig.sq[j]),
+       mu1[j], mu2[j],
+       log(tau.sq1[j]), log(tau.sq2[j])) * p[j]
+   }))
+ })
> 
> f_est <- sapply(1:n, function(i) {
+   sum(sapply(1:K, function(j) {
+     k(t[i], x[i,1], x[i,2],
+       model$posteriorMeans$mu[j], log(model$posteriorMeans$sigma.sq[j]),
+       model$posteriorMeans$mu1[j], model$posteriorMeans$mu2[j],
+       log(model$posteriorMeans$tau.sq1[j]), log(model$posteriorMeans$tau.sq2[j])) * 
+       model$posteriorMeans$pi[j]
+   }))
+ })
> 
> df_true <- data.frame(x=x[,1], y=x[,2], f=f_true)
> df_est <- data.frame(x=x[,1], y=x[,2], f=f_est)
> lims <- c(0, max(f_est))
> 
> ggplot(data=df_true, aes(x, y, height=0.05, width=0.05)) +
+   geom_tile(aes(fill = f)) +
+   scale_fill_distiller(palette = "Spectral", na.value = NA, limits = lims) +
+   theme_classic()
> 
> ggplot(data=df_est, aes(x, y, height=0.05, width=0.05)) +
+   geom_tile(aes(fill = f)) +
+   scale_fill_distiller(palette = "Spectral", na.value = NA, limits = lims) +
+   theme_classic()
> 
> library(interp)

Attaching package: ‘interp’

The following object is masked from ‘package:spatstat.geom’:

    area

> df_true <- interp(x[,1], x[,2], f_true, nx = 50, ny = 50) |> 
+   interp2xyz() |> 
+   as.data.frame()
> ggplot(data = df_true, aes(x, y)) +
+   geom_raster(aes(fill = z)) +
+   scale_fill_distiller(palette = "Spectral", na.value = NA, limits = lims) + 
+   theme_classic() +
+   ggtitle("True f")
Warning message:
Removed 341 rows containing missing values (`geom_raster()`). 
> ggsave(filename = "figures/surf_truth.pdf", height = 5)
Saving 7 x 5 in image
Warning message:
Removed 341 rows containing missing values (`geom_raster()`). 
> 
> df_est <- interp(x[,1], x[,2], f_est, nx = 50, ny = 50) |> 
+   interp2xyz() |> 
+   as.data.frame()
> ggplot(data = df_est, aes(x, y)) +
+   geom_raster(aes(fill = z)) +
+   scale_fill_distiller(palette = "Spectral", na.value = NA, limits = lims) + 
+   theme_classic() +
+   ggtitle("Estimated f")
Warning message:
Removed 341 rows containing missing values (`geom_raster()`). 
> ggsave(filename = "figures/surf_est.pdf", height = 5)
Saving 7 x 5 in image
Warning message:
Removed 341 rows containing missing values (`geom_raster()`). 
> 
> model$acceptance
              v        mu     theta mu1 mu2     alpha beta
 [1,] 0.4727273 0.7090909 0.5181818 0.7   0 0.4909091  0.7
 [2,] 0.4727273 0.7090909 0.5181818 0.7   0 0.4909091  0.7
 [3,] 0.4727273 0.7090909 0.5181818 0.7   0 0.4909091  0.7
 [4,] 0.4727273 0.7090909 0.5181818 0.7   0 0.4909091  0.7
 [5,] 0.4727273 0.7090909 0.5181818 0.7   0 0.4909091  0.7
 [6,] 0.4727273 0.7090909 0.5181818 0.7   0 0.4909091  0.7
 [7,] 0.4727273 0.7090909 0.5181818 0.7   0 0.4909091  0.7
 [8,] 0.4727273 0.7090909 0.5181818 0.7   0 0.4909091  0.7
 [9,] 0.4727273 0.7090909 0.5181818 0.7   0 0.4909091  0.7
[10,] 0.4727273 0.7090909 0.5181818 0.7   0 0.4909091  0.7
> 
> proc.time()
    user   system  elapsed 
2256.740   11.689 2269.362 
