}
if (!is.null(cellwidth) & !is.null(gridsize)) {
stop("Either cell width OR grid size must be specified")
}
if (!all(sapply(gridsize, is.pow2))) {
stop("All elements of gridsize must be a power of 2")
}
if (!is.null(gridsize)) {
approxcw <- diff(sd$window$xrange)/gridsize[1]
cwseq <- seq(approxcw/2, 2 * approxcw, length.out = 500)
cwfun <- function(cw) {
ow <- selectObsWindow(sd, cw)
return(c(ow$M, ow$N))
}
gsmat <- t(sapply(cwseq, cwfun))
tf <- apply(gsmat, 1, function(x) {
return(all(x == gridsize))
})
if (sum(tf) == 0) {
stop("No sensible observation window found: either change gridsize, or specify cellwidth instead")
}
else {
cellwidth <- cwseq[min(which(tf))]
}
}
if (!is.null(gradtrunc)) {
if (gradtrunc < 0) {
stop("gradtrunc must be non-negative")
}
}
if (mcmc.control$burnin > mcmc.control$mala.length) {
stop("Number of burnin iterations must be less than the total number of iterations")
}
sigma <- model.parameters$sigma
phi <- model.parameters$phi
mu <- model.parameters$mu
theta <- model.parameters$theta
if (!is.null(spatial.offset)) {
scaleconst <- spatial.offset
}
else {
GMRF <- FALSE
if (!is.null(attr(sd, "covbase"))) {
GMRF <- TRUE
}
if (sd$window$type == "rectangle") {
sd$window <- as.polygonal(sd$window)
}
if (is.null(cellwidth) & is.null(gridsize)) {
stop("Either cell width OR grid size must be specified")
}
if (!is.null(cellwidth) & !is.null(gridsize)) {
stop("Either cell width OR grid size must be specified")
}
if (!all(sapply(gridsize, is.pow2))) {
stop("All elements of gridsize must be a power of 2")
}
if (!is.null(gridsize)) {
approxcw <- diff(sd$window$xrange)/gridsize[1]
cwseq <- seq(approxcw/2, 2 * approxcw, length.out = 500)
cwfun <- function(cw) {
ow <- selectObsWindow(sd, cw)
return(c(ow$M, ow$N))
}
gsmat <- t(sapply(cwseq, cwfun))
tf <- apply(gsmat, 1, function(x) {
return(all(x == gridsize))
})
if (sum(tf) == 0) {
stop("No sensible observation window found: either change gridsize, or specify cellwidth instead")
}
else {
cellwidth <- cwseq[min(which(tf))]
}
}
if (!is.null(gradtrunc)) {
if (gradtrunc < 0) {
stop("gradtrunc must be non-negative")
}
}
if (mcmc.control$burnin > mcmc.control$mala.length) {
stop("Number of burnin iterations must be less than the total number of iterations")
}
sigma <- model.parameters$sigma
phi <- model.parameters$phi
mu <- model.parameters$mu
theta <- model.parameters$theta
if (!is.null(spatial.offset)) {
scaleconst <- spatial.offset
}
else {
spatial.offset
scaleconst <- sd$n/exp(mu + sigma^2/2)
ow <- selectObsWindow(sd, cellwidth)
sd <- ow$xyt
M <- ow$M
N <- ow$N
if (M * N >= (256^2)) {
Sys.sleep(1)
cat("\n")
warning("USING LARGE FFT GRID: COMPUTATION MAY BE SLOW ON SOME MACHINES ...",
.immediate = TRUE)
cat("\n")
}
cat(paste("FFT Grid size: [", ext * M, " , ", ext * N, "]\n",
sep = ""))
rm(ow)
if (!any(class(spatial.intensity) == "spatialAtRisk")) {
spatial <- spatialAtRisk(spatial.intensity)
}
!any(class(spatial.intensity) == "spatialAtRisk")
study.region <- sd$window
del1 <- (study.region$xrange[2] - study.region$xrange[1])/M
del2 <- (study.region$yrange[2] - study.region$yrange[1])/N
Mext <- ext * M
Next <- ext * N
mcens <- study.region$xrange[1] + 0.5 * del1 + (0:(Mext -
1)) * del1
ncens <- study.region$yrange[1] + 0.5 * del2 + (0:(Next -
1)) * del2
cellarea <- del1 * del2
if (inclusion == "centroid") {
cellInside <- inside.owin(x = rep(mcens, Next), y = rep(ncens,
each = Mext), w = study.region)
}
inclusion
cellInside <- touchingowin(x = mcens, y = ncens, w = study.region)
cellInside <- matrix(as.numeric(cellInside), Mext, Next)
spatialvals <- fftinterpolate(spatial, mcens, ncens, ext = ext)
spatialvals <- spatialvals * cellInside
spatialvals <- spatialvals/(cellarea * sum(spatialvals))
GMRF
bcb <- blockcircbase(x = mcens, y = ncens, sigma = sigma,
phi = phi, model = spatial.covmodel, additionalparameters = covpars)
Qeigs <- eigenfrombase(inversebase(bcb))
rqe <- sqrt(Qeigs)
irqe <- 1/rqe
mLoop = mcmcLoop(N = mcmc.control$mala.length, burnin = mcmc.control$burnin,
thin = mcmc.control$retain, progressor = mcmcProgressTextBar)
nsamp <- floor((mLoop$N - mLoop$burnin)/mLoop$thin)
!is.null(output.control$gridfunction) & class(output.control$gridfunction)[1] ==
"dump2dir"
nis <- getCounts(xyt = sd, M = M, N = N, ext = ext)
ct1 <- sum(nis)
nis <- nis * cellInside
ct2 <- sum(nis)
ct2
ct
ct1
is.null(gradtrunc)
gridfun <- output.control$gridfunction
is.null(gridfun)
gridfun <- nullFunction()
gridav <- output.control$gridmeans
gridav
gridav <- nullAverage()
lg <- MALAlgcpSpatial(mcmcloop = mLoop, inits = mcmc.control$inits,
adaptivescheme = mcmc.control$adaptivescheme, M = M,
N = N, Mext = Mext, Next = Next, sigma = sigma, phi = phi,
mu = mu, nis = nis, cellarea = cellarea, spatialvals = spatialvals,
scaleconst = scaleconst, rootQeigs = rqe, invrootQeigs = irqe,
cellInside = cellInside, MCMCdiag = mcmc.control$MCMCdiag,
gradtrunc = gradtrunc, gridfun = gridfun, gridav = gridav,
mcens = mcens, ncens = ncens)
endtime <- Sys.time()
timetaken <- difftime(endtime, starttime, units = "mins")
lg$xyt <- sd
lg$M <- M
lg$N <- N
lg$aggtimes <- NA
lg$tdiffs <- NA
lg$vars <- NA
lg$spatial <- spatial
lg$temporal <- scaleconst
lg$grid <- list(spatialvals)
lg$nis <- lgcpgrid(nis, xvals = mcens[1:M], yvals = ncens[1:N])
lg$mcens <- mcens[1:M]
lg$ncens <- ncens[1:N]
lg$sigma <- sigma
lg$phi <- phi
lg$mu <- mu
lg$theta <- theta
lg$mcmcpars <- mcmc.control
lg$timetaken <- timetaken
lg$spatialonly <- TRUE
lg$ext <- ext
lg$cellInside <- cellInside[1:M, 1:N]
lg$inclusion <- inclusion
class(lg) <- c("lgcpPredict", "lgcpobject")
lg
lg <- lgcpPredictSpatial(sd = sd, cellwidth = CELLWIDTH, spatial.intensity = density.ppp(sd),
mcmc.control = mcmc.control)
lg <- MALAlgcpSpatial(mcmcloop = mLoop, inits = mcmc.control$inits,
adaptivescheme = mcmc.control$adaptivescheme, M = M,
N = N, Mext = Mext, Next = Next, sigma = sigma, phi = phi,
mu = mu, nis = nis, cellarea = cellarea, spatialvals = spatialvals,
scaleconst = scaleconst, rootQeigs = rqe, invrootQeigs = irqe,
cellInside = cellInside, MCMCdiag = mcmc.control$MCMCdiag,
gradtrunc = gradtrunc, gridfun = gridfun, gridav = gridav,
mcens = mcens, ncens = ncens)
traceback()
mcmc.control
mcmc.control <- mcmcpars(
mala.length = 20, burnin = 10, retain = 10,
adaptivescheme = andrieuthomsh(inith = 1, alpha = 0.5, C = 1,
targetacceptance = 0.574))
lg <- lgcpPredictSpatial(sd = sd, cellwidth = CELLWIDTH, spatial.intensity = density.ppp(sd),
mcmc.control = mcmc.control)
traceback()
mcmcloop = mLoop
inits = mcmc.control$inits
adaptivescheme = mcmc.control$adaptivescheme
rootQeigs = rqe
invrootQeigs = irqe
MCMCdiag = mcmc.control$MCMCdiag
SpatialOnlyMode <- TRUE
SpatialPlusParameters <- FALSE
SpatioTemporalPlusParameters <- FALSE
MultiTypeMode <- FALSE
cellOutside <- !as.logical(cellInside)
logspatial <- log(scaleconst * spatialvals)
logspatial[cellOutside | spatialvals == 0] <- 0
temporal.fitted <- Inf
nlevs <- NULL
GFinitialise(gridfun)
GAinitialise(gridav)
h <- initialiseAMCMC(adaptivescheme)
hrec <- h
nsamp <- 0
icount <- 0
MCMCacc <- 0
y.mean <- matrix(0, M, N)
y.var <- matrix(0, M, N)
EY.mean <- matrix(0, M, N)
EY.var <- matrix(0, M, N)
Gamma <- matrix(0, Mext, Next)
oldtags <- target.and.grad.spatial(Gamma = Gamma, nis = nis,
cellarea = cellarea, rootQeigs = rootQeigs, invrootQeigs = invrootQeigs,
mu = mu, spatial = spatialvals, logspat = logspatial,
scaleconst = scaleconst, gradtrunc = gradtrunc)
oldtags
logtarget <- c()
while (nextStep(mcmcloop)) {
propmeans <- Gamma + (h/2) * oldtags$grad
propGamma <- propmeans + sqrt(h) * rnorm(Mext * Next)
proptags <- target.and.grad.spatial(Gamma = propGamma,
nis = nis, cellarea = cellarea, rootQeigs = rootQeigs,
invrootQeigs = invrootQeigs, mu = mu, spatial = spatialvals,
logspat = logspatial, scaleconst = scaleconst, gradtrunc = gradtrunc)
revpropmeans <- propGamma + (h/2) * proptags$grad
ac <- exp(proptags$logtarget - oldtags$logtarget - sum((Gamma -
revpropmeans)^2)/(2 * h) + sum((propGamma - propmeans)^2)/(2 *
h))
ac <- min(ac, 1)
icount <- icount + 1
MCMCacc <- ((icount - 1)/icount) * MCMCacc + ac/icount
trigger <- FALSE
if (proptags$logtarget == -Inf | is.na(ac) | is.nan(ac)) {
gradtrunc <- gradtrunc/2
cat("Reducing gradient truncation to:", gradtrunc,
"\n")
oldtags <- target.and.grad.spatial(Gamma = Gamma,
nis = nis, cellarea = cellarea, rootQeigs = rootQeigs,
invrootQeigs = invrootQeigs, mu = mu, spatial = spatialvals,
logspat = logspatial, scaleconst = scaleconst,
gradtrunc = gradtrunc)
if (!is.burnin(mcmcloop)) {
cat("Gradient truncation currently", gradtrunc,
"\n")
cat("Suggest reducing this further and setting gradtrunc manually in lgcpPredictSpatial.\n")
stop(paste("Problem with gradient truncation at iteration",
iteration(mcmcloop), "acceptance probability =",
ac))
}
ac <- 0
trigger <- TRUE
}
if (ac > runif(1)) {
Gamma <- propGamma
oldtags <- proptags
}
if (iteration(mcmcloop) > 1) {
hrec <- c(hrec, h)
}
trigger <- FALSE
if (!trigger) {
h <- updateAMCMC(adaptivescheme)
}
if (is.retain(mcmcloop)) {
nsamp <- nsamp + 1
y.mean <- ((nsamp - 1)/nsamp) * y.mean + oldtags$Y[1:M,
1:N]/nsamp
EY.mean <- ((nsamp - 1)/nsamp) * EY.mean + oldtags$expY[1:M,
1:N]/nsamp
if (nsamp > 1) {
y.var <- ((nsamp - 2)/(nsamp - 1)) * y.var +
(nsamp/(nsamp - 1)^2) * (y.mean - oldtags$Y[1:M,
1:N])^2
EY.var <- ((nsamp - 2)/(nsamp - 1)) * EY.var +
(nsamp/(nsamp - 1)^2) * (EY.mean - oldtags$expY[1:M,
1:N])^2
}
GFupdate(gridfun)
GAupdate(gridav)
logtarget <- c(logtarget, oldtags$logtarget)
}
}
retlist <- list(lasth = h, lastGAM = oldtags$Gamma)
GFfinalise(gridfun)
GAfinalise(gridav)
retlist$mcmcacc <- MCMCacc
retlist$hrec <- hrec
retlist$y.mean <- lgcpgrid(list(y.mean), xvals = mcens[1:M],
yvals = ncens[1:N])
retlist$y.var <- lgcpgrid(list(y.var), xvals = mcens[1:M],
yvals = ncens[1:N])
retlist$EY.mean <- lgcpgrid(list(EY.mean), xvals = mcens[1:M],
yvals = ncens[1:N])
retlist$EY.var <- lgcpgrid(list(EY.var), xvals = mcens[1:M],
yvals = ncens[1:N])
retlist$gridfunction <- GFreturnvalue(gridfun)
retlist$gridaverage <- GAreturnvalue(gridav)
retlist$mcmcinfo <- mcmcloop
retlist$gradtrunc <- gradtrunc
retlist$logtarget <- logtarget
is.retain(mcmcloop)
oldtags
Gamma
nis
cellarea
rootQeigs
setwd("~/research/point_processes/lgcp")
load("sd_liver.RData")
load("popshape_liver.RData")
minimum.contrast(sd, model = "exponential", method = "g",
intens = density(sd), transform = log)
chooseCellwidth(sd, cwinit = 300)
CELLWIDTH <- 300
EXT <- 2
library(lgcp)
library(spatstat)
minimum.contrast(sd, model = "exponential", method = "g",
intens = density(sd), transform = log)
popshape@data <- guessinterp(popshape@data)
popshape@data <- assigninterp(df = popshape@data,
vars = c("pop", "males", "females"),
value = "ArealWeightedSum")
mcmc.control <- mcmcpars(
mala.length = 20, burnin = 10, retain = 10,
adaptivescheme = andrieuthomsh(inith = 1, alpha = 0.5, C = 1,
targetacceptance = 0.574))
lg <- lgcpPredictSpatial(sd = sd, cellwidth = CELLWIDTH, spatial.intensity = density.ppp(sd),
mcmc.control = mcmc.control)
traceback()
nextStep()
?nextStep(
?nextStep
nextElem
CELLWIDTH
cellwidth=300
spatial.intensity = density.ppp(sd)
spatial.intensity
class(spatial.intensity)
mcmc.control
model.parameters = lgcppars()
spatial.covmodel = "exponential"
gridsize = NULL
covpars = c()
spatial.offset = NULL
output.control = setoutput()
gradtrunc = Inf
ext = 2
inclusion = "touching"
starttime <- Sys.time()
GMRF <- FALSE
if (!is.null(attr(sd, "covbase"))) {
GMRF <- TRUE
}
if (sd$window$type == "rectangle") {
sd$window <- as.polygonal(sd$window)
}
if (is.null(cellwidth) & is.null(gridsize)) {
stop("Either cell width OR grid size must be specified")
}
if (!is.null(cellwidth) & !is.null(gridsize)) {
stop("Either cell width OR grid size must be specified")
}
if (!all(sapply(gridsize, is.pow2))) {
stop("All elements of gridsize must be a power of 2")
}
if (!is.null(gridsize)) {
approxcw <- diff(sd$window$xrange)/gridsize[1]
cwseq <- seq(approxcw/2, 2 * approxcw, length.out = 500)
cwfun <- function(cw) {
ow <- selectObsWindow(sd, cw)
return(c(ow$M, ow$N))
}
gsmat <- t(sapply(cwseq, cwfun))
tf <- apply(gsmat, 1, function(x) {
return(all(x == gridsize))
})
if (sum(tf) == 0) {
stop("No sensible observation window found: either change gridsize, or specify cellwidth instead")
}
else {
cellwidth <- cwseq[min(which(tf))]
}
}
if (!is.null(gradtrunc)) {
if (gradtrunc < 0) {
stop("gradtrunc must be non-negative")
}
}
if (mcmc.control$burnin > mcmc.control$mala.length) {
stop("Number of burnin iterations must be less than the total number of iterations")
}
sigma <- model.parameters$sigma
phi <- model.parameters$phi
mu <- model.parameters$mu
theta <- model.parameters$theta
spatial.offset
scaleconst <- sd$n/exp(mu + sigma^2/2)
ow <- selectObsWindow(sd, cellwidth)
sd <- ow$xyt
M <- ow$M
N <- ow$N
M
N
M*N
256^2
cat(paste("FFT Grid size: [", ext * M, " , ", ext * N, "]\n",
sep = ""))
Sys.sleep(1)
rm(ow)
!any(class(spatial.intensity) == "spatialAtRisk")
spatial <- spatialAtRisk(spatial.intensity)
study.region <- sd$window
del1 <- (study.region$xrange[2] - study.region$xrange[1])/M
del2 <- (study.region$yrange[2] - study.region$yrange[1])/N
Mext <- ext * M
Next <- ext * N
mcens <- study.region$xrange[1] + 0.5 * del1 + (0:(Mext -
1)) * del1
ncens <- study.region$yrange[1] + 0.5 * del2 + (0:(Next -
1)) * del2
cellarea <- del1 * del2
cellInside <- touchingowin(x = mcens, y = ncens, w = study.region)
cellInside <- matrix(as.numeric(cellInside), Mext, Next)
spatialvals <- fftinterpolate(spatial, mcens, ncens, ext = ext)
spatialvals <- spatialvals * cellInside
spatialvals <- spatialvals/(cellarea * sum(spatialvals))
GMRF
bcb <- blockcircbase(x = mcens, y = ncens, sigma = sigma,
phi = phi, model = spatial.covmodel, additionalparameters = covpars)
Qeigs <- eigenfrombase(inversebase(bcb))
rqe <- sqrt(Qeigs)
irqe <- 1/rqe
mLoop = mcmcLoop(N = mcmc.control$mala.length, burnin = mcmc.control$burnin,
thin = mcmc.control$retain, progressor = mcmcProgressTextBar)
nsamp <- floor((mLoop$N - mLoop$burnin)/mLoop$thin)
!is.null(output.control$gridfunction) & class(output.control$gridfunction)[1] ==
"dump2dir"
nis <- getCounts(xyt = sd, M = M, N = N, ext = ext)
ct1 <- sum(nis)
nis <- nis * cellInside
ct2 <- sum(nis)
if (ct2 < ct1) {
warning(paste(ct1 - ct2, " data points lost due to discretisation.",
sep = ""), immediate. = TRUE)
}
if (is.null(gradtrunc)) {
gradtrunc <- computeGradtruncSpatial(nsims = 100, scale = 1,
nis = nis, mu = mu, rootQeigs = rqe, invrootQeigs = irqe,
scaleconst = scaleconst, spatial = spatialvals, cellarea = cellarea)
}
gridfun <- output.control$gridfunction
if (is.null(gridfun)) {
gridfun <- nullFunction()
}
gridav <- output.control$gridmeans
if (is.null(gridav)) {
gridav <- nullAverage()
}
lg <- MALAlgcpSpatial(mcmcloop = mLoop, inits = mcmc.control$inits,
adaptivescheme = mcmc.control$adaptivescheme, M = M,
N = N, Mext = Mext, Next = Next, sigma = sigma, phi = phi,
mu = mu, nis = nis, cellarea = cellarea, spatialvals = spatialvals,
scaleconst = scaleconst, rootQeigs = rqe, invrootQeigs = irqe,
cellInside = cellInside, MCMCdiag = mcmc.control$MCMCdiag,
gradtrunc = gradtrunc, gridfun = gridfun, gridav = gridav,
mcens = mcens, ncens = ncens)
lg
lg$y.mean
sd
plot(sd)
lg$y.mean
c(lg$y.mean)
plot(lg$y.mean$xvals, lg$y.mean$yvals)
length(lg$y.mean$xvals)
length(lg$y.mean$yvals)
length(lg$y.mean$zvals)
lg$y.mean$zvals
mloop
mLoop
mcmc.control <- mcmcpars(
mala.length = 50, burnin = 10, retain = 10,
adaptivescheme = andrieuthomsh(inith = 1, alpha = 0.5, C = 1,
targetacceptance = 0.574))
lg <- lgcpPredictSpatial(sd = sd, cellwidth = CELLWIDTH, spatial.intensity = density.ppp(sd),
mcmc.control = mcmc.control)
mLoop
mcmc.control
